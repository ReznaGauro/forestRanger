library(devtools)
usethis::use_mit_license()
use_r("loaData")
loaData <- function(raster_path, shapefile_path) {
# Loading raster data
img <- raster::brick(raster_path)
cat("Loaded raster data:\n")
print(img)
# Loading shapefile
shp <- rgdal::readOGR(dsn = shapefile_path)
cat("Loaded shapefile:\n")
print(shp)
# Check labels of shapefile
cat("Labels of shapefile:\n")
levels_factor <- levels(as.factor(shp$Class))
for (i in seq_along(levels_factor)) {
cat(paste0(i, " ", levels_factor[i]), "\n")
}
return(list(raster_data = img, shapefile_data = shp))
}
use_r("Rename")
Rename <- function(img) {
band_names <- paste0("b", 1:nlayers(img))
names(img) <- band_names
return(img)
}
use_r("extRact")
extRact <- function(img, shp) {
# Extracting raster values
smp <- raster::extract(img, shp, df = TRUE)
cat("Extracted raster values:\n")
print(smp)
# Assigning factor levels from shapefile
smp$cl <- as.factor(shp$Class[match(smp$ID, seq(nrow(shp)))])
# Removing the first column (ID)
smp <- smp[-1]
# Summary of factor levels
cat("Summary of factor levels:\n")
print(summary(smp$cl))
# Structure of data frame
cat("Structure of data frame:\n")
str(smp)
return(smp)
}
use_r("tRain")
tRain <- function(smp, ntree = 250) {
# Calculate sample size for each class
smp.size <- rep(min(summary(smp$cl)), nlevels(smp$cl))
# Tune and train the Random Forest model
rfmodel <- randomForest::tuneRF(
x = smp[-ncol(smp)],
y = smp$cl,
strata = smp$cl,
ntree = ntree,
importance = TRUE,
doBest = TRUE
)
# Save the trained RF model
save(rfmodel, file = "rfmodel.RData")
return(rfmodel)
}
use_r("Ranger")
Ranger <- function(img, rfmodel, filename = "classification_RF.tif", overwrite = TRUE) {
# Predict image data with RF model
result <- raster::predict(img, rfmodel, filename = filename, overwrite = overwrite)
# Return the result (optional)
return(result)
}
use_r("accuRacy")
accuRacy <- function(classified_img, training_shapefile, validation_shapefile) {
# Load classified image and shapefiles
img.classified <- raster::raster(classified_img)
shp.train <- rgdal::readOGR(dsn = training_shapefile)
shp.valid <- rgdal::readOGR(dsn = validation_shapefile)
# Get reference and predicted classes
reference <- as.factor(shp.valid$Class)
predicted <- as.factor(raster::extract(img.classified, shp.valid))
# Create accuracy matrix
accmat <- table(pred = predicted, ref = reference)
# Calculate user's accuracy (UA), producer's accuracy (PA), and overall accuracy (OA)
UA <- diag(accmat) / rowSums(accmat) * 100
PA <- diag(accmat) / colSums(accmat) * 100
OA <- sum(diag(accmat)) / sum(accmat) * 100
# Return results
return(list(accuracy_matrix = accmat, user_accuracy = UA, producer_accuracy = PA, overall_accuracy = OA))
}
devtools::load_all()
devtools::document()
devtools::check()
devtools::build()
devtools::install()
